#version 330 core

uniform sampler2D textureUnit0;
uniform sampler2D textureUnit1;
uniform sampler2D textureUnit2;

uniform sampler2DShadow depthTexture;

uniform mat4 shadowMatrix;
uniform mat4 lightViewMatrix;
uniform mat4 lightProjectMatrix;
uniform mat4 scaleMatrix;

uniform vec3 lightPosition;
uniform vec3 lightDir;
uniform vec3 lightColor;

uniform sampler2D textureColor;
uniform sampler2D texturePosition;
uniform sampler2D textureNormal;

uniform float fSRandNum[256];
uniform float fCRandNum[256];


in vec2 vOutTexCoord0;

void main()
{
	vec4 color = texture2D(textureUnit0, vOutTexCoord0);	
	vec4 position = texture2D(textureUnit1, vOutTexCoord0);	
	vec4 normal = texture2D(textureUnit2, vOutTexCoord0);	
	
	float f = textureProj(depthTexture, shadowMatrix * position);
	vec3 mainLightDir = -normalize(lightDir);//normalize(lightPosition - position.xyz);
	float mainRate = max(dot(mainLightDir, normal.xyz), 0);
	vec3 lightCTotal =  mainRate * lightColor;
	

	float rowSampleNum = 10;
	float colSampleNum = 10;
	float sampleTotalNum = rowSampleNum * colSampleNum;
	float valRowNum = 256;
	float valColNum = 256;
	
	vec4 posInValMap = shadowMatrix * position;
	vec2 texCoordInValMap = posInValMap.xy / posInValMap.w;

	float scale = 1.0;
	float texXBegin = texCoordInValMap.x - 0.5 * rowSampleNum * scale / valRowNum;
	float texYBegin = texCoordInValMap.y - 0.5 * colSampleNum * scale / valColNum;
	
	float rowStep = scale / valRowNum;
	float colStep = scale / valColNum;

	float rmax = 16.0 / valRowNum;
	vec3 indirectLC = vec3(0.0, 0.0, 0.0);
	for (int i = 0; i< sampleTotalNum; i+=1)
	{
		//float y = floor(i / colSampleNum);
		//float x = i - y * colSampleNum;
		//vec2 tex = vec2(texXBegin + colStep * x, texYBegin + rowStep * y);
		float x = texCoordInValMap.x + rmax * fSRandNum[i];
		float y = texCoordInValMap.y + rmax * fCRandNum[i];
		vec2 tex = vec2(x, y);
		vec4 valC = texture2D(textureColor, tex);
		vec4 valP = texture2D(texturePosition, tex);
		vec4 valN = texture2D(textureNormal, tex);
		float valRate = max(dot(mainLightDir, valN.xyz), 0);
		
		vec3 shootDir = normalize(position.xyz - valP.xyz);
		
		vec3 shootColor = valC.rgb * valRate * max(dot(shootDir, valN.xyz), 0) / 3.14;
		
		float dis = max(distance(valP.xyz, position.xyz), 1.0);
		vec3 irradiance = shootColor * max(dot(normal.xyz, -shootDir), 0) / (0.2 * dis);// pow(dis, 4.0);
		
		indirectLC += irradiance;
		
	}
	indirectLC /= sampleTotalNum;
	lightCTotal += indirectLC;

	//gl_FragColor = mix(vec4(lightCTotal.xyz, 1.0) * color, vec4(indirectLC, 1.0), 0.5);
	//gl_FragColor = vec4(indirectLC * color.xyz, 1.0);
	gl_FragColor = vec4(lightCTotal * color.xyz, 1.0);
	//gl_FragColor = texture2D(textureColor, vOutTexCoord0);
}