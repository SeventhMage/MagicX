#version 330 core

uniform sampler2D textureUnit0;
uniform sampler2D textureUnit1;
uniform sampler2D textureUnit2;

uniform sampler2DShadow depthTexture;

uniform mat4 shadowMatrix;
uniform mat4 lightViewMatrix;
uniform mat4 lightProjectMatrix;
uniform mat4 scaleMatrix;

uniform vec3 lightPosition;
uniform vec3 lightColor;

uniform sampler2D textureColor;
uniform sampler2D texturePosition;
uniform sampler2D textureNormal;


in vec2 vOutTexCoord0;

void main()
{
	vec4 color = texture2D(textureUnit0, vOutTexCoord0);	
	vec4 position = texture2D(textureUnit1, vOutTexCoord0);	
	vec4 normal = texture2D(textureUnit2, vOutTexCoord0);	
	
	float f = textureProj(depthTexture, shadowMatrix * position);
	vec3 mainLightDir = normalize(lightPosition - position.xyz);
	float mainRate = max(dot(mainLightDir, normal.xyz), 0);
	vec3 lightCTotal =  mainRate * lightColor;
	
	vec4 lightPosOfVal = lightViewMatrix * position;
	
	float boxSize = 2.0;
	vec4 posMinW = scaleMatrix * lightProjectMatrix * (lightPosOfVal - vec4(boxSize, boxSize, boxSize, 0));
	vec4 posMaxW = scaleMatrix * lightProjectMatrix * (lightPosOfVal + vec4(boxSize, boxSize, boxSize, 0));
	vec2 posMin = posMinW.xy / posMinW.w;
	vec2 posMax = posMaxW.xy / posMaxW.w;
	float posWidth = posMax.x - posMin.x;
	float posHeight = posMax.y - posMin.y;
	

	float width = 512;
	float height = 512;
	float scale = 10;
	float scaleInv = 1.0 / scale;
	
	float stepX = posWidth / scale;
	float stepY = posHeight / scale;


	vec3 indirectLC = vec3(0.0, 0.0, 0.0);
	for (int i=0; i<scale; i+=1)
	{
		for (int j=0; j<scale; j+=1)
		{
			vec2 tex = vec2(posMin.x + i * posWidth * scaleInv, posMin.y + j * posHeight * scaleInv);
			vec4 lightC = texture2D(textureColor, tex);
			vec4 lightP = texture2D(texturePosition, tex);
			vec4 lightN = texture2D(textureNormal, tex);
			float lightRate = max(dot(mainLightDir, lightN.xyz), 0);
			
			vec3 dir = normalize(lightP.xyz - position.xyz);
			
			vec3 shootColor = max(dot(-dir, lightN.xyz), 0) * lightC.rgb * dot(mainLightDir, lightN.xyz) / 3.14159;
			vec3 irradiance = shootColor * max(dot(normal.xyz, (lightP - position).xyz), 0) / pow(max(distance(lightP.xyz, position.xyz), 2.0), 4.0);
			indirectLC += irradiance;
		}
	}
	
	lightCTotal += indirectLC;

	//gl_FragColor = mix(vec4(lightCTotal.xyz, 1.0) * color, vec4(indirectLC, 1.0), 0.5);
	gl_FragColor = vec4(indirectLC * color.xyz, 1.0);
	//gl_FragColor = vec4(lightCTotal * color.xyz, 1.0);
}