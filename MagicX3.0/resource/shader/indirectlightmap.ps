#version 330 core

uniform sampler2D tGColor;
uniform sampler2D tGPosition;
uniform sampler2D tGNormal;

uniform sampler2D tRSMFlux;
uniform sampler2D tRSMPosition;
uniform sampler2D tRSMNormal;

uniform mat4 shadowMatrix;

uniform vec3 lightPosition;
uniform vec3 lightDir;
uniform vec3 lightColor;


uniform float fSRandNum[256];
uniform float fCRandNum[256];


in vec2 vOutTexCoord0;

void main()
{
	vec4 color = texture2D(tGColor, vOutTexCoord0);	
	vec4 position = texture2D(tGPosition, vOutTexCoord0);	
	vec4 normal = texture2D(tGNormal, vOutTexCoord0);	
	
	vec3 mainLightDir = -normalize(lightDir);//normalize(lightPosition - position.xyz);

	int sampleTotalNum = 120;
	float valRowNum = 800;
	float valColNum = 600;
	
	vec4 posInValMap = shadowMatrix * position;

	vec2 texCoordInValMap = posInValMap.xy / posInValMap.w;

	float rxmax = 8.0 / valRowNum;
	float rymax = 6.0 / valColNum;
	vec3 indirectLC = vec3(0.0, 0.0, 0.0);
	float shelter = 0.0;
	for (int i = 0; i< sampleTotalNum; i+=1)
	{
		float x = texCoordInValMap.x + rxmax * fSRandNum[i];
		float y = texCoordInValMap.y + rymax * fCRandNum[i];
		vec2 tex = vec2(x, y);
		vec4 valC = texture2D(tRSMFlux, tex);
		vec4 valP = texture2D(tRSMPosition, tex);
		vec4 valN = texture2D(tRSMNormal, tex);
		float valRate = max(dot(mainLightDir, valN.xyz), 0.0);
		
		vec3 shootDir = normalize(position.xyz - valP.xyz);
		
		vec3 shootColor = valC.rgb * valRate * max(dot(shootDir, valN.xyz), 0) / 3.14;
		
		float dis = max(distance(valP.xyz, position.xyz), 1.0);
		vec3 irradiance = shootColor * max(dot(normal.xyz, -shootDir), 0) / (pow(dis, 4.0));// + 2 * pow(dis, 2.0) + 3 * dis + 4.0);
		
		indirectLC += irradiance;
		
		float v = (1.0 - step(0.0, dot(shootDir, valN.xyz))) * step(0.0, dot(-shootDir, normal.xyz));
		shelter +=  v * max(dot(-shootDir, normal.xyz), 0.0);// / (dis);
	}
	//indirectLC /= sampleTotalNum;

	shelter  /= float(sampleTotalNum);

	gl_FragColor = vec4(indirectLC, 1.0 - shelter);
}