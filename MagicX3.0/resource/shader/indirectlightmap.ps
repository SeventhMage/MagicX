#version 330 core

uniform sampler2D tGPosition;
uniform sampler2D tGNormal;

uniform sampler2D tRSMFlux;
uniform sampler2D tRSMPosition;
uniform sampler2D tRSMNormal;

uniform mat4 shadowMatrix;

uniform vec3 lightPosition;
uniform vec3 lightDir;
uniform vec3 lightColor;


uniform float fSRandNum[256];
uniform float fCRandNum[256];

in vec2 vOutTexCoord0;

void calcIndirectLight(int i, vec2 texCoordInValMap, float stepRate, vec3 gPosition, vec3 gNormal, inout vec3 indirectLC, inout float shelter)
{
		float x = texCoordInValMap.x + stepRate * fSRandNum[i];
		float y = texCoordInValMap.y + stepRate * fCRandNum[i];
		vec2 tex = vec2(x, y);
		vec4 valC = texture(tRSMFlux, tex);
		vec4 valP = texture(tRSMPosition, tex);
		vec4 valN = texture(tRSMNormal, tex);
		float valRate = max(dot(-lightDir, valN.xyz), 0.0);
		
		vec3 shootDir = normalize(gPosition - valP.xyz);
		
		vec3 shootColor = valC.rgb * valRate * max(dot(shootDir, valN.xyz), 0.0) / 3.14;
		
		float dis = max(distance(valP.xyz, gPosition), 1.0);
		vec3 irradiance = shootColor * max(dot(gNormal, -shootDir), 0.0) / (pow(dis, 4.0));// + 2.0 * pow(dis, 2.0) + 3.0 * dis + 4.0);
		
		indirectLC += irradiance;
		
		float v = (1.0 - step(0.0, dot(shootDir, valN.xyz))) * step(0.0, dot(-shootDir, gNormal.xyz));
		shelter += max(dot(-shootDir, gNormal.xyz), 0);// / dis * dis);	
}


void main()
{
	vec4 gPosition = texture(tGPosition, vOutTexCoord0);	
	vec4 gNormal = texture(tGNormal, vOutTexCoord0);	
	
	vec3 mainLightDir = -normalize(lightDir);//normalize(lightPosition - position.xyz);
	
	vec4 posInValMap = shadowMatrix * gPosition;
	vec2 texCoordInValMap = posInValMap.xy / posInValMap.w;

	float stepRate = 0.1;
	int samplingTotalNum = 128;
	vec3 indirectLC = vec3(0.0, 0.0, 0.0);
	float shelter = 0.0;
	for (int i = 0; i< samplingTotalNum; ++i)
	{
		calcIndirectLight(i, texCoordInValMap, stepRate, gPosition.xyz, gNormal.xyz, indirectLC, shelter);
	}

	shelter /= float(samplingTotalNum);
	gl_FragColor = vec4(indirectLC, 1.0 - shelter);
}